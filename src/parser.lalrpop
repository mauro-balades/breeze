use std::str::FromStr;
use crate::nodes::{{ Node, Expr }};
use crate::project::ProjectInfo;

grammar;

RootNodes: Node = {
    Task,
    DefaultTask,
    VariableDecl,
}

RootHeader: ProjectInfo = {
    "project" <name:ident> "version" <version:string> ";"
        => ProjectInfo::from((name, version))
}

Statement: Node = {
    FunctionCall,
    LangCall,
    Message,
}

VariableDecl: Node = {
    "set" <name:variable> <e:Expr> ";" => Node::VariableDecl(name, e)
}

Message: Node = {
    "message" <e:Expr> ";" => Node::Message(e)
}

Block: Vec<Node> = {
    Statement*
}

StringExpr: Expr = {
    <s:string> => Expr::String(s)
}

Expr: Expr = {
    StringExpr
}

LangCall: Node = {
    "@" <lang:ident> "." <i:ident> "(" <args:CallArguments> ")" ";" => Node::LangCall(lang, i, args)
}

FunctionCall: Node = {
    <i:ident> "(" <args:CallArguments> ")" ";" => Node::FunctionCall(i, args)
}

// this is not being parsed correctly!
CallArgument: (String, Expr) = {
    <i:ident> "=" <v:Expr> => (i, v)
}

CallArguments: Vec<(String, Expr)> = {
     <mut params: (<CallArgument> ",")*> <last: (<CallArgument>)?> => {
        params.extend(last.clone());
        params
    },
}

DefaultTask: Node = {
    "default_task" <name:ident> ";" => Node::DefaultTask(name)
}

Task: Node = {
    "task" <name:ident>  "{" <block:Block> "}" => Node::Task(name, block)
}

pub Breeze: (ProjectInfo, Vec<Node>) = {
    <header:RootHeader> <block:RootNodes*>
        => (header, block)
}

Num: i64 = r"[0-9]+" => i64::from_str(<>).unwrap();
string: String = r#""(\\\\|\\"|[^"\\])*""# => {
    let mut chars = <>.chars();
    chars.next();
    chars.next_back();
    chars.as_str().to_string()
};

pub ident: String = r"[a-zA-Z][a-zA-Z0-9_-]*" => <>.to_string();
pub variable: String = r"\$[a-zA-Z][a-zA-Z0-9_-]*" => <>.to_string();
