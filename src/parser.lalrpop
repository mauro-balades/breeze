use std::str::FromStr;
use breeze::nodes::{{ Node }};
use breeze::project::ProjectInfo;

grammar;

RootNodes: Node = {
    Task, DefaultTask
}

RootHeader: ProjectInfo = {
    "project" <name:ident> "version" <version:string> ";"
        => ProjectInfo::from((name, version))
}

Statement: Node = {
}

Block: Vec<Node> = {
    Statement*
}

DefaultTask: Node = {
    "default_task" <name:ident> => Node::DefaultTask(name)
}

Task: Node = {
    "task" <name:ident>  "{" <block:Block> "}" => Node::Task(name, block)
}

pub Breeze: (ProjectInfo, Vec<Node>) = {
    <header:RootHeader> <block:RootNodes*>
        => (header, block)
}

Num: i64 = r"[0-9]+" => i64::from_str(<>).unwrap();
string: String = r#"".*""# => {
    let mut chars = <>.chars();
    chars.next();
    chars.next_back();
    chars.as_str().to_string()
};
ident: String = r"[a-zA-Z][a-zA-Z0-9_-]*" => <>.to_string();